# --- QMIX specific parameters ---
seed : 0
run_name : "SDQ2.1250.32"
exp_name : "6h_vs_8z"
# use epsilon greedy action selector
action_selector: "epsilon_greedy"
epsilon_start: 1.0
epsilon_finish: 0.05
epsilon_anneal_time: 500000 # 500000 for 6h_vs_8z
alg : "qmix"
runner: "parallel"
batch_size_run: 2 # batch_size_run=4, buffer_size = 2500, batch_size=64  for 3s5z_vs_3s6z
buffer_size: 1250
batch_size: 32
optimizer: 'adam'

mu : 0.7
theta : 0.1
t_max: 2010000

# update the target network every {} episodes
target_update_interval: 200

# use the Q_Learner to train
mac: "sdq"
agent: "n_rnn"
agent_output_type: q

learner: "nq_learner"
mixer: "qmix"
mixing_embed_dim: 32
hypernet_embed: 64
lr: 0.001 # Learning rate for agents
td_lambda: 0.3 # 0.3 for 6h_vs_8z #######################################
q_lambda: False

# rnn layer normalization
use_layer_norm: False

# orthogonal init for DNN
use_orthogonal: False
gain: 0.01

# Priority experience replay
use_per: False
per_alpha: 0.6
per_beta: 0.4
return_priority: False

quantile_embed_dim: 64
n_quantiles: 32
n_target_quantiles: 32
n_approx_quantiles: 32



num_kernel: 4
is_minus_one: True
weighted_head: True
is_adv_attention: True
is_stop_gradient: True
double_q: True
adv_hypernet_layers: 2
adv_hypernet_embed: 64


qtran_arch: "qtran_paper"

opt_loss: 1
nopt_min_loss: 0.1

network_size: small
name: "qmix_env=8_adam_td_lambda"
central_mixing_embed_dim: 256
central_action_embed: 1
central_mac: "basic_central_mac"
central_agent: "central_rnn"
central_rnn_hidden_dim: 64
central_mixer: "ff"

central_loss: 1
qmix_loss: 1
w: 0.1 # $\alpha$ in the paper
hysteretic_qmix: False # False -> CW-QMIX, True -> OW-QMIX